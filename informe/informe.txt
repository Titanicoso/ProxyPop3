



Grupo 7                                                       F. Delgado
Internet-Draft                                         R. Navarro Lajous
Expires: May 7, 2019                                          S. Favarón
                                                            A. Calatayud
                                   Instituto Tecnológico de Buenos Aires
                                                        November 3, 2018


                 Informe TPE Protocolos de comunicación

Abstract

   This memo blah blah blah....

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 7, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Delgado, et al.            Expires May 7, 2019                  [Page 1]

Internet-Draft   Informe TPE Protocolos de comunicación    November 2018


1.  Aplicaciones y protocolos desarrollados

1.1.  El protocolo SPCP

1.1.1.  introducción al protocolo

   El Simple Proxy Communication Protocol(SPCP) es un protocolo binario
   utilizado para poder configurar y obtener métricas de un servidor
   proxy.  En el diseño del protocolo se priorizo la simpleza asi
   permitiendo que sea implementado lo mas fácilmente posible siempre y
   cuando no comprometa el objetivo principal de administrar el proxy

1.1.2.  Operación Básica

   Inicialmente, el servidor spcp inicializa su servicio escuchando en
   el puerto 9090 por default para aceptar conexiones sctp entrantes.
   Cuando el cliente desea utilizar el servicio este debe establecer una
   conexión sctp con el servidor.

   Una vez establecida la conexión se procede a la etapa de
   autenticación, el cliente manda su usuario y su contraseña y estos
   son validados por el servidor.  Una vez autenticado se procede al
   estado de transacción en donde se mandan requests tanto para
   modificar el estado del proxy como para obtener métricas del mismo
   recibiendo para cada uno una respuesta con la informacion en el caso
   de que se haya podido obtener, o un estado de error apropiado.
   Finalmente se envía un request de terminación en donde se le indica
   al servidor que el cliente desea finalizar su sesión y el servidor da
   por finalizada la sesión.

1.1.3.  El request

   La estructura de un request

     +-----+-------+----------+----------+...+----------+----------+
     | CMD | NARGS | ARGLEN 1 |  ARG 1   |   | ARGLEN N |   ARG N  |
     +-----+-------+----------+----------+...+----------+----------+
     |  1  |   1   |    1     | Variable |   |    1     | Variable |
     +-----+-------+----------+----------+...+----------+----------+

   El request se compone por un numero variable de segmentos, estos son:

      CMD: El identificador de comando, tiene un tamaño de un byte.

      NARGS: La cantidad de argumentos, tiene tamaño de un byte.






Delgado, et al.            Expires May 7, 2019                  [Page 2]

Internet-Draft   Informe TPE Protocolos de comunicación    November 2018


      ARGLEN: Cada argumento se encuentra precedido por el largo del
      mismo, este tiene un maximo de 255 ya que este campo tiene un byte
      de longitud.

      ARG: El argumento de tamaño anteriormente especificado, los
      argumentos son representaciones ASCII.

1.1.4.  La Response

   La estructura de un response

                 +-------------+---------+----------+
                 | STATUS_CODE | DATALEN |   DATA   |
                 +-------------+---------+----------+
                 |      1      |    1    | Variable |
                 +-------------+---------+----------+

   El response se compone por un numero variable de segmentos, estos
   son:

      STATUS_CODE: Identifica el codigo de la respuesta.

      DATALEN: La longitud de los datos de la respuesta del servidor.

      DATA: Los datos enviados por el servidor, estos se encuentran en
      codificación ASCII.

1.1.4.1.  Codigos de respuesta

   Discutimos brevemente los posibles codigos de respuesta que un
   servidor puede enviar a un cliente

      0x00: es el response de OK, indica que el request se ejecuto con
      exito por parte del servidor.

      0x01: Error de autenticación, indica que hubo un error al tratar
      de autenticar el usuario.

      0x02: Comando invalido, el comando que se envio en el request no
      es un comando valido.

      0x03: Argumentos invalidoos, indica que los argumentos para el
      comando no son validos.

      0x04: Error general, es el error de fallback del servidor cuando
      no puede especificar por que fallo.





Delgado, et al.            Expires May 7, 2019                  [Page 3]

Internet-Draft   Informe TPE Protocolos de comunicación    November 2018


1.1.5.  Estado de autenticación

   Una vez inicializada la conexión el servidor se encuentra en el
   estado de autenticación.  El cliente debe proveer su usuario mediante
   el comando 0x00, al cual llamaremos USER.

   El comando USER se compone de la siguiente manera:

      Argumentos: uno, la representación ASCII del nombre de usuario.

      Restricciones: Solo se puede utilizar en el estado de
      autenticación una vez inicializada la conexión o inmediatamente
      despues de un USER o PASS erróneo.

      Discusión: Primero se debe mandar el comando USER, si el usuario
      esta registrado entonces el servidor responde con una respuesta
      positiva mandando el byte 0x00.  En caso contrario respondera con
      un 0x01 (AUTH ERROR)

   Inmediatamente despues del comando USER debe proveer mediante otro
   request la contraseña asociada al usuario.  Para esto emite un
   request al servidor con el comando 0x01, al cual le llamaremos PASS
   de ahora en adelante.

   El comando PASS se compone de la siguiente manera:

      Argumentos: uno, la representación ASCII de la contraseña.

      Restricciones: Solo se puede utilizar en el estado de
      autenticación una vez inicializada la conexión e inmediatamente
      después de un USER.

1.1.6.  Estado de transacción

   Ya habiendo sido autenticado el servidor procede al estado de
   transacción, en este estado se podra consular el estado del proxy
   como también alterarlo.  Para esto se usan distintos comandos que
   procederemos a describir:

   0x02, conexiones concurrentes:

      Argumentos: ninguno

      Restricciones: Solo puede ser utilizado en el estado de
      transacción.

      Discusión: El comando obtiene la representación ASCII de la
      cantidad de conexiones al servidor que se encuentran establecidas



Delgado, et al.            Expires May 7, 2019                  [Page 4]

Internet-Draft   Informe TPE Protocolos de comunicación    November 2018


      al momento de procesarse el request.  En el cazo de que el
      servidor no pueda responder satisfactoriamente al request este
      responderá con un estado de error apropiado.

   0x03, bytes transferidos:

      Argumentos: ninguno.

      Restricciones: Solo puede ser utilizado en el estado de
      transacción.

      Discusión: El comando obtiene como respuesta positiva la
      representación ASCII de la cantidad de bytes que fueron
      transferidos desde que el servidor arranco.  En el cazo de que el
      servidor no pueda responder satisfactoriamente al request este
      responderá con un estado de error apropiado.

   0x04, Accesos históricos:

      Argumentos: ninguno.

      Restricciones: Solo puede ser utilizado en el estado de
      transacción.

      Discusión: El comando obtiene como respuesta positiva el número de
      accesos que hubieron al servidor desde que se inicializo.  En el
      cazo de que el servidor no pueda responder satisfactoriamente al
      request este responderá con un estado de error apropiado.

   0x05, Transformación activa:

      Argumentos: ninguno.

      Restricciones: Solo puede ser utilizado en el estado de
      transacción.

      Discusión: El comando obtiene como respuesta la representación
      ASCII del programa de transformación que esta ejecutando el
      servidor.  En el caso de no tener ningún programa de
      transformación se recibe una respuesta positiva sin ningún dato.
      Si por alguna razón no se pudo devolver la transformación activa
      entonces se devuelve un código de error apropiado como se
      especifico anterior mente

   0x06, Modificar el tamaño de los buffers:

      Argumentos: uno, la representación ASCII en decimal del nuevo
      tamaño para los buffers.



Delgado, et al.            Expires May 7, 2019                  [Page 5]

Internet-Draft   Informe TPE Protocolos de comunicación    November 2018


      Restricciones: Solo puede ser utilizado en el estado de
      transacción.

      Discusión: El comando cambia el tamaño que se le asignan a los
      buffers al momento de inciializar una nueva conexion al servidor.
      Si se pudo realizar el cambio con éxito entonces se obtiene como
      respuesta 0x00 (OK).  En caso contrario se obtiene una respuesta
      con el error apropiado como se especifico anteriormente.

   0x07, Cambio de transformación:

      Argumentos: uno, la representación ASCII del nuevo comando de
      transformación.

      Restricciones: Solo puede ser utilizado en el estado de
      transacción.

      Discusión: El comando cambia la transformación a realizar.  En el
      caso de querer desactivar las transformaciones simplemente se
      envía el comando de cambio de transformación sin datos.  El
      servidor responde de manera positiva (0x00) cuando pudo cambiar
      con éxito las transformaciones, caso contrario responde con un
      error apropiado.

   0x09, Terminación de la sesión:

      Argumentos: ninguno

      Restricciones: Solo puede ser utilizado en el estado de
      transacción.

      Discusión: Cuando se envia un request con este comando se le avisa
      al servidor que el cliente desea finalizar la sesión, el servidor
      responde de manera exitosa y termina la conexión.

1.1.7.  Limitaciones del protocolo

   El protocolo, dada su simpleza, posee varias limitaciones y las
   discutimos a continuación

1.1.7.1.  Tamaño de los argumentos

   El protocolo posee un byte para indicar el tamaño del argumento, por
   lo que permite solamente argumentos de como maximo 255 bytes, esto no
   limita de manera sustancial el cambio del tamaño de los buffers ya
   que resultaría excesivo un buffer con un tamaño superior a 10^255
   bytes.  en cambio limita considerablemente la posibilidad de las




Delgado, et al.            Expires May 7, 2019                  [Page 6]

Internet-Draft   Informe TPE Protocolos de comunicación    November 2018


   transformaciones a realizar ya que la transformación debe ser un
   comando con una longitud máxima de 255 caracteres.

2.  Problemas encontrados

2.1.  Piplinging con servidor de origen no pipeliner

2.2.  Detección y transformación de mensajes

3.  Limitaciones

3.1.  modificación del tamaño de los buffers

   se modifican los de las nuevas conexiones a partir del cambio, no
   dinamicamente las conexiones ya existentes

4.  Posibles extensiones

5.  conclusiones

6.  ejemplos de pruba

7.  Guía de instalación

8.  Instrucciones para la configuración

9.  Ejemplos de configuración y monitoreo

10.  References

   [TODO]     Juan F. Codagnone, "Server Socks V5", 3 2018.

Authors' Addresses

   Francisco Delgado
   Instituto Tecnológico de Buenos Aires


   Rodrigo Manuel Navarro Lajous
   Instituto Tecnológico de Buenos Aires


   Sebastián Favaron
   Instituto Tecnológico de Buenos Aires


   Agustín Calatayud
   Instituto Tecnológico de Buenos Aires



Delgado, et al.            Expires May 7, 2019                  [Page 7]
